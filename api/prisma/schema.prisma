datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ownedProjects Project[]
  assignedTasks Task[]    @relation("AssigneeTasks")
  createdTasks  Task[]    @relation("CreatorTasks")
  comments      Comment[]
  notifications Notification[] // Added relation to Notification model
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  taskPrefix String  @unique
  lastTaskNumber Int @default(0)
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  columns   Column[]
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Column {
  id        String   @id @default(uuid())
  name      String
  position  Int
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, projectId])
  @@index([projectId])
}

model Task {
  id              String    @id @default(uuid())
  humanReadableId String    @unique
  taskNumber      Int
  title           String
  description     String?
  position        Int
  projectId       Int
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columnId        String
  column          Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assigneeId      String?
  assignee        User?     @relation("AssigneeTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId       String
  creator         User      @relation("CreatorTasks", fields: [creatorId], references: [id], onDelete: Restrict)
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  comments        Comment[] // Added relation to Comment model
  notifications   Notification[] // Added relation to Notification model

  @@unique([projectId, taskNumber])
  @@index([columnId])
  @@index([assigneeId])
  @@index([creatorId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String    // Renamed from content
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String?   // Renamed from userId and made optional
  author    User?     @relation(fields: [authorId], references: [id], onDelete: SetNull) // Updated relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([authorId]) // Updated index
}

model Notification {
  id          String   @id @default(uuid())
  text        String   // Renamed from message
  isRead      Boolean  @default(false) // Renamed from read
  recipientId String   // Renamed from userId
  recipient   User     @relation(fields: [recipientId], references: [id], onDelete: Cascade) // Updated relation
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  sourceUrl   String?  // Added new field
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([recipientId]) // Updated index
  @@index([taskId])
}
