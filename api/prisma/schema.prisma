datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid2())
  email         String   @unique
  name          String?
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ownedProjects Project[]
  assignedTasks Task[]    @relation("AssigneeTasks")
  createdTasks  Task[]    @relation("CreatorTasks")
  projectMembers         ProjectMember[]
  comments               Comment[] @relation("CommentAuthor")
  notifications          Notification[] @relation("RecipientNotifications")
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  taskPrefix String  @unique
  lastTaskNumber Int @default(0)
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  columns   Column[]
  tasks     Task[]
  members   ProjectMember[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Column {
  id        String   @id @default(cuid2())
  name      String
  position  Int
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, projectId])
  @@index([projectId])
}

model Task {
  id              String    @id @default(cuid2())
  humanReadableId String    @unique
  taskNumber      Int
  title           String
  description     String?
  position        Int
  projectId       Int
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columnId        String
  column          Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assigneeId      String?
  assignee        User?     @relation("AssigneeTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId       String
  creator         User      @relation("CreatorTasks", fields: [creatorId], references: [id], onDelete: Restrict)
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  comments      Comment[]
  notifications Notification[] @relation("TaskNotifications")

  @@unique([projectId, taskNumber])
  @@index([columnId])
  @@index([assigneeId])
  @@index([creatorId])
}

model Comment {
  id        String   @id @default(cuid2())
  text      String
  taskId    String
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author    User?    @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: SetNull)

  @@map("comments")
}

model Notification {
  id          String   @id @default(cuid2())
  text        String
  sourceUrl   String?
  isRead      Boolean  @default(false)
  recipientId String
  taskId      String? // Optional link to a task
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipient   User     @relation("RecipientNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  task        Task?    @relation("TaskNotifications", fields: [taskId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ProjectMember {
  projectId Int
  userId    String
  role      String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@map("project_members") // Explicitly map to the table name used in Database Schema.md
}
